#include <stdio.h>
#include <stdlib.h>
#include <cmath>
struct Node {
    int key;
    int data;
    struct Node* next;
    struct Node* prev;
};
struct HashTable {
    struct Node** table;
    int capacity;
    int size;
};
struct Node* createNode(int key,int data) {
    struct Node* newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->key=key;
    newNode->data=data;
    newNode->next=NULL;
    newNode->prev=NULL;
    return newNode;
}
void destroyNode(struct Node* node) {
    free(node);
}
void initializeHashTable(struct HashTable* ht,int initialCapacity) {
    ht->capacity=initialCapacity;
    ht->size=0;
    ht->table=(struct Node**)malloc(ht->capacity * sizeof(struct Node*));
    for (int i=0;i < ht->capacity;++i) {
        ht->table[i]=NULL;
    }
}
int hash(int key,int capacity) {
    double A=0.6180339887;
    return (int)(capacity * fmod((key * A),1));
}
void insert(struct HashTable* ht,int key,int data) {
    if ((double)ht->size / ht->capacity >= 0.75) {
    }
    int index=hash(key,ht->capacity);
    struct Node* newNode=createNode(key,data);
    newNode->next=ht->table[index];
    if (ht->table[index]) {
        ht->table[index]->prev=newNode;
    }
    ht->table[index]=newNode;
    ++(ht->size);
}
int get(struct HashTable* ht, int key) {
    int index=hash(key,ht->capacity);
    struct Node* current=ht->table[index];
    while (current) {
        if (current->key == key) {
            return current->data;
        }
        current=current->next;
    }
    return -1; 
}
void removeKey(struct HashTable* ht,int key) {
    int index=hash(key,ht->capacity);
    struct Node* current=ht->table[index];
    while (current) {
        if (current->key == key) {
            if (current->prev) {
                current->prev->next=current->next;
            } else {
                ht->table[index]=current->next;
            }
            if (current->next) {
                current->next->prev=current->prev;
            }
            destroyNode(current);
            --(ht->size);
            return;
        }
        current=current->next;
    }
}
void print(struct HashTable* ht) {
    for (int i=0;i < ht->capacity;++i) {
        printf("[%d]: ",i);
        struct Node* current=ht->table[i];
        while (current) {
            printf("(%d, %d) ",current->key,current->data);
            current=current->next;
        }
        printf("\n");
    }
}
int main() {
    struct HashTable ht;
    initializeHashTable(&ht,10);
    insert(&ht,5,40);
    insert(&ht,15,27);
    insert(&ht,25,30);
    insert(&ht,35,60);
    insert(&ht,45,55);
    printf("Hash Table:\n");
    print(&ht);
    printf("Value for key 15: %d\n",get(&ht,15));
    removeKey(&ht,35);
    printf("Hash Table after removing key 35:\n");
    print(&ht);
    return 0;
}
